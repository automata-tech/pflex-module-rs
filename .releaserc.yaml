---
branches:
  # More details
  # - https://www.notion.so/automatatech/Automating-semantic-versioning-d17cfb2d357c4a14a683c02c24883d8b
  # - https://www.notion.so/automatatech/Release-branching-strategy-for-the-backend-and-frontend-repos-90bc8e9916a646b0a6cb95a2a000f16c
  #
  # It's very important that this expression goes first
  # https://github.com/semantic-release/semantic-release/issues/2560#issuecomment-1246894865
  #
  # The order of the branches has to match the tags order.
  # Each branch has to have releases that are higher than the previous branch.
  # Maintenance branches are expected to have a specific range without a prefix.
  #   (see https://github.com/automata-tech/platform-go/pull/1881 for more details)
  # eg:
  # - v1.1.x      latest tag: v1.1.4 (smaller than the next)
  # - v1.2.x      latest tag: v1.2.2
  # - v1.3.x      latest tag: v1.3.9
  # - v2.0.x      latest tag: v2.0.1
  # - main        latest tag: >= v2.1
  # - development latest tag: >= main's latest tag
  - name: "v+([0-9])?(.{+([0-9]),x}).x" # v1.x, v1.1.x, v2.x --- fix --- v1.0.x (v1.0.1)
    range: "${name.replace(/^v/g, '')}" # as above but without the 'v'. Must have this range to be considered a maintenance branch
  - name: main
  # The selected branch for the release candidates, if any
  - name: development
    prerelease: true

plugins:
  - - "@semantic-release/commit-analyzer"
    - preset: angular
      parserOpts:
        noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES"]
      releaseRules:
        - breaking: true
          release: major
        - revert: true
          release: patch
        - type: feat
          release: minor
        - type: fix
          release: patch
        - type: chore
          release: false
        - type: docs
          release: false
        - type: test
          release: false
        - type: tests
          release: false
        - # if a commit type is missing, default to a minor release (i.e. assume feat:)
          # Note that dependabot has its own rule which shouldn't be overwritten by this
          # which is why we're explicitly disallowing its commits. The release bot's commits
          # wouldn't be matched here and it sets the release to false which always takes
          # the highest precedence anyway
          type: null
          release: minor
          author:
            name: "!dependabot[bot]"
        - # the commits generated by dependabot should be patch releases
          author:
            name: dependabot[bot]
          release: patch
        - # the commits generated by the release bot shouldn't generate a new release
          author:
            name: semantic-release-bot
          release: false
  - "@semantic-release/release-notes-generator"
  - - "@semantic-release/changelog"
    - changelogFile: CHANGELOG.md
      changelogTitle: "# Changelog #"
  - - "@semantic-release/exec"
    - verifyReleaseCmd: echo "${nextRelease.version}" > ./version
  - - "@semantic-release/git"
    - assets:
        - CHANGELOG.md
  - "@semantic-release/github"
  - - "semantic-release-slack-bot"
    - notifyOnSuccess: true
      notifyOnFail: false
      packageName: "mock-robot"
      markdownReleaseNotes: true

repositoryUrl: https://github.com/automata-tech/pflex-module-rs
ci: true
